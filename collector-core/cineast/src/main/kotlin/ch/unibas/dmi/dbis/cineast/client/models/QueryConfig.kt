/**
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ch.unibas.dmi.dbis.cineast.client.models


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * 
 *
 * @param queryId 
 * @param hints 
 * @param relevantSegmentIds 
 * @param distance 
 * @param distanceWeights 
 * @param norm 
 * @param resultsPerModule 
 * @param maxResults 
 * @param distanceIfEmpty 
 * @param correspondenceFunctionIfEmpty 
 * @param correspondenceFunction 
 * @param distanceWeightsIfEmpty 
 * @param normIfEmpty 
 * @param rawResultsPerModule 
 */

data class QueryConfig (

    @field:JsonProperty("queryId")
    val queryId: kotlin.String? = null,

    @field:JsonProperty("hints")
    val hints: kotlin.collections.Set<QueryConfig.Hints>? = null,

    @field:JsonProperty("relevantSegmentIds")
    val relevantSegmentIds: kotlin.collections.Set<kotlin.String>? = null,

    @field:JsonProperty("distance")
    val distance: QueryConfig.Distance? = null,

    @field:JsonProperty("distanceWeights")
    val distanceWeights: kotlin.collections.List<kotlin.Float>? = null,

    @field:JsonProperty("norm")
    val norm: kotlin.Float? = null,

    @field:JsonProperty("resultsPerModule")
    val resultsPerModule: kotlin.Int? = null,

    @field:JsonProperty("maxResults")
    val maxResults: kotlin.Int? = null,

    @field:JsonProperty("distanceIfEmpty")
    val distanceIfEmpty: QueryConfig? = null,

    @field:JsonProperty("correspondenceFunctionIfEmpty")
    val correspondenceFunctionIfEmpty: QueryConfig? = null,

    @field:JsonProperty("correspondenceFunction")
    val correspondenceFunction: kotlin.Any? = null,

    @field:JsonProperty("distanceWeightsIfEmpty")
    val distanceWeightsIfEmpty: QueryConfig? = null,

    @field:JsonProperty("normIfEmpty")
    val normIfEmpty: QueryConfig? = null,

    @field:JsonProperty("rawResultsPerModule")
    val rawResultsPerModule: kotlin.Int? = null

) {

    /**
     * 
     *
     * Values: EXACT,INEXACT,LSH,ECP,MI,PQ,SH,VA,VAF,VAV,SEQUENTIAL,EMPIRICAL
     */
    enum class Hints(val value: kotlin.String) {
        @JsonProperty(value = "exact") EXACT("exact"),
        @JsonProperty(value = "inexact") INEXACT("inexact"),
        @JsonProperty(value = "lsh") LSH("lsh"),
        @JsonProperty(value = "ecp") ECP("ecp"),
        @JsonProperty(value = "mi") MI("mi"),
        @JsonProperty(value = "pq") PQ("pq"),
        @JsonProperty(value = "sh") SH("sh"),
        @JsonProperty(value = "va") VA("va"),
        @JsonProperty(value = "vaf") VAF("vaf"),
        @JsonProperty(value = "vav") VAV("vav"),
        @JsonProperty(value = "sequential") SEQUENTIAL("sequential"),
        @JsonProperty(value = "empirical") EMPIRICAL("empirical");
    }
    /**
     * 
     *
     * Values: CHISQUARED,CORRELATION,COSINE,HAMMING,JACCARD,KULLBACKLEIBLER,CHEBYSHEV,EUCLIDEAN,SQUAREDEUCLIDEAN,MANHATTAN,MINKOWSKI,SPANNORM,HAVERSINE
     */
    enum class Distance(val value: kotlin.String) {
        @JsonProperty(value = "chisquared") CHISQUARED("chisquared"),
        @JsonProperty(value = "correlation") CORRELATION("correlation"),
        @JsonProperty(value = "cosine") COSINE("cosine"),
        @JsonProperty(value = "hamming") HAMMING("hamming"),
        @JsonProperty(value = "jaccard") JACCARD("jaccard"),
        @JsonProperty(value = "kullbackleibler") KULLBACKLEIBLER("kullbackleibler"),
        @JsonProperty(value = "chebyshev") CHEBYSHEV("chebyshev"),
        @JsonProperty(value = "euclidean") EUCLIDEAN("euclidean"),
        @JsonProperty(value = "squaredeuclidean") SQUAREDEUCLIDEAN("squaredeuclidean"),
        @JsonProperty(value = "manhattan") MANHATTAN("manhattan"),
        @JsonProperty(value = "minkowski") MINKOWSKI("minkowski"),
        @JsonProperty(value = "spannorm") SPANNORM("spannorm"),
        @JsonProperty(value = "haversine") HAVERSINE("haversine");
    }
}

