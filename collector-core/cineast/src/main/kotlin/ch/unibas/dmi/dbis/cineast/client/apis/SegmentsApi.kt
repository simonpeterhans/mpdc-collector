/**
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ch.unibas.dmi.dbis.cineast.client.apis

import java.io.IOException
import okhttp3.OkHttpClient

import ch.unibas.dmi.dbis.cineast.client.models.SimilarityQuery
import ch.unibas.dmi.dbis.cineast.client.models.SimilarityQueryResultBatch
import ch.unibas.dmi.dbis.cineast.client.models.StagedSimilarityQuery
import ch.unibas.dmi.dbis.cineast.client.models.TemporalQuery
import ch.unibas.dmi.dbis.cineast.client.models.TemporalQueryResult

import com.fasterxml.jackson.annotation.JsonProperty

import ch.unibas.dmi.dbis.cineast.client.infrastructure.ApiClient
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ApiResponse
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ClientException
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ClientError
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ServerException
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ServerError
import ch.unibas.dmi.dbis.cineast.client.infrastructure.MultiValueMap
import ch.unibas.dmi.dbis.cineast.client.infrastructure.PartConfig
import ch.unibas.dmi.dbis.cineast.client.infrastructure.RequestConfig
import ch.unibas.dmi.dbis.cineast.client.infrastructure.RequestMethod
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ResponseType
import ch.unibas.dmi.dbis.cineast.client.infrastructure.Success
import ch.unibas.dmi.dbis.cineast.client.infrastructure.toMultiValue

class SegmentsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Find similar segments based on the given query
     * Performs a similarity search based on the formulated query
     * @param similarityQuery  (optional)
     * @return SimilarityQueryResultBatch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSegmentSimilar(similarityQuery: SimilarityQuery? = null) : SimilarityQueryResultBatch {
        val localVarResponse = findSegmentSimilarWithHttpInfo(similarityQuery = similarityQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SimilarityQueryResultBatch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find similar segments based on the given query
     * Performs a similarity search based on the formulated query
     * @param similarityQuery  (optional)
     * @return ApiResponse<SimilarityQueryResultBatch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSegmentSimilarWithHttpInfo(similarityQuery: SimilarityQuery?) : ApiResponse<SimilarityQueryResultBatch?> {
        val localVariableConfig = findSegmentSimilarRequestConfig(similarityQuery = similarityQuery)

        return request<SimilarityQuery, SimilarityQueryResultBatch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findSegmentSimilar
     *
     * @param similarityQuery  (optional)
     * @return RequestConfig
     */
    fun findSegmentSimilarRequestConfig(similarityQuery: SimilarityQuery?) : RequestConfig<SimilarityQuery> {
        val localVariableBody = similarityQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/segments/similar",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find similar segments based on the given staged query
     * Performs a similarity search based on the formulated query stages, executing each subsequent stage on the results of the previous stage
     * @param stagedSimilarityQuery  (optional)
     * @return SimilarityQueryResultBatch
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSegmentSimilarStaged(stagedSimilarityQuery: StagedSimilarityQuery? = null) : SimilarityQueryResultBatch {
        val localVarResponse = findSegmentSimilarStagedWithHttpInfo(stagedSimilarityQuery = stagedSimilarityQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SimilarityQueryResultBatch
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find similar segments based on the given staged query
     * Performs a similarity search based on the formulated query stages, executing each subsequent stage on the results of the previous stage
     * @param stagedSimilarityQuery  (optional)
     * @return ApiResponse<SimilarityQueryResultBatch?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSegmentSimilarStagedWithHttpInfo(stagedSimilarityQuery: StagedSimilarityQuery?) : ApiResponse<SimilarityQueryResultBatch?> {
        val localVariableConfig = findSegmentSimilarStagedRequestConfig(stagedSimilarityQuery = stagedSimilarityQuery)

        return request<StagedSimilarityQuery, SimilarityQueryResultBatch>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findSegmentSimilarStaged
     *
     * @param stagedSimilarityQuery  (optional)
     * @return RequestConfig
     */
    fun findSegmentSimilarStagedRequestConfig(stagedSimilarityQuery: StagedSimilarityQuery?) : RequestConfig<StagedSimilarityQuery> {
        val localVariableBody = stagedSimilarityQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/segments/similar/staged",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find similar segments based on the given temporal query
     * Performs a similarity search based on the formulated query stages in the given temporal order, scoring final results by their similarity to the specified temporal context
     * @param temporalQuery  (optional)
     * @return TemporalQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSegmentSimilarTemporal(temporalQuery: TemporalQuery? = null) : TemporalQueryResult {
        val localVarResponse = findSegmentSimilarTemporalWithHttpInfo(temporalQuery = temporalQuery)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TemporalQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find similar segments based on the given temporal query
     * Performs a similarity search based on the formulated query stages in the given temporal order, scoring final results by their similarity to the specified temporal context
     * @param temporalQuery  (optional)
     * @return ApiResponse<TemporalQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSegmentSimilarTemporalWithHttpInfo(temporalQuery: TemporalQuery?) : ApiResponse<TemporalQueryResult?> {
        val localVariableConfig = findSegmentSimilarTemporalRequestConfig(temporalQuery = temporalQuery)

        return request<TemporalQuery, TemporalQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findSegmentSimilarTemporal
     *
     * @param temporalQuery  (optional)
     * @return RequestConfig
     */
    fun findSegmentSimilarTemporalRequestConfig(temporalQuery: TemporalQuery?) : RequestConfig<TemporalQuery> {
        val localVariableBody = temporalQuery
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/segments/similar/temporal",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
