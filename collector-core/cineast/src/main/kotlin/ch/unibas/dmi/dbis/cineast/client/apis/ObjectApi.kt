/**
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ch.unibas.dmi.dbis.cineast.client.apis

import java.io.IOException
import okhttp3.OkHttpClient

import ch.unibas.dmi.dbis.cineast.client.models.IdList
import ch.unibas.dmi.dbis.cineast.client.models.MediaObjectQueryResult

import com.fasterxml.jackson.annotation.JsonProperty

import ch.unibas.dmi.dbis.cineast.client.infrastructure.ApiClient
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ApiResponse
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ClientException
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ClientError
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ServerException
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ServerError
import ch.unibas.dmi.dbis.cineast.client.infrastructure.MultiValueMap
import ch.unibas.dmi.dbis.cineast.client.infrastructure.PartConfig
import ch.unibas.dmi.dbis.cineast.client.infrastructure.RequestConfig
import ch.unibas.dmi.dbis.cineast.client.infrastructure.RequestMethod
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ResponseType
import ch.unibas.dmi.dbis.cineast.client.infrastructure.Success
import ch.unibas.dmi.dbis.cineast.client.infrastructure.toMultiValue

class ObjectApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Find all objects for a certain type
     * Find all objects for a certain type
     * @return MediaObjectQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findObjectsAll() : MediaObjectQueryResult {
        val localVarResponse = findObjectsAllWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find all objects for a certain type
     * Find all objects for a certain type
     * @return ApiResponse<MediaObjectQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findObjectsAllWithHttpInfo() : ApiResponse<MediaObjectQueryResult?> {
        val localVariableConfig = findObjectsAllRequestConfig()

        return request<Unit, MediaObjectQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findObjectsAll
     *
     * @return RequestConfig
     */
    fun findObjectsAllRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/objects/all",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find object by specified attribute value. I.e by id, name or path
     * Find object by specified attribute value. I.e by id, name or path
     * @param attribute The attribute type of the value. One of: id, name, path
     * @param `value` The actual value that you want to filter for
     * @return MediaObjectQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findObjectsByAttribute(attribute: kotlin.String, `value`: kotlin.String) : MediaObjectQueryResult {
        val localVarResponse = findObjectsByAttributeWithHttpInfo(attribute = attribute, `value` = `value`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find object by specified attribute value. I.e by id, name or path
     * Find object by specified attribute value. I.e by id, name or path
     * @param attribute The attribute type of the value. One of: id, name, path
     * @param `value` The actual value that you want to filter for
     * @return ApiResponse<MediaObjectQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findObjectsByAttributeWithHttpInfo(attribute: kotlin.String, `value`: kotlin.String) : ApiResponse<MediaObjectQueryResult?> {
        val localVariableConfig = findObjectsByAttributeRequestConfig(attribute = attribute, `value` = `value`)

        return request<Unit, MediaObjectQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findObjectsByAttribute
     *
     * @param attribute The attribute type of the value. One of: id, name, path
     * @param `value` The actual value that you want to filter for
     * @return RequestConfig
     */
    fun findObjectsByAttributeRequestConfig(attribute: kotlin.String, `value`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/object/by/{attribute}/{value}".replace("{"+"attribute"+"}", attribute.toString()).replace("{"+"value"+"}", `value`.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find objects by id
     * Find objects by id
     * @param idList  (optional)
     * @return MediaObjectQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findObjectsByIdBatched(idList: IdList? = null) : MediaObjectQueryResult {
        val localVarResponse = findObjectsByIdBatchedWithHttpInfo(idList = idList)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find objects by id
     * Find objects by id
     * @param idList  (optional)
     * @return ApiResponse<MediaObjectQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findObjectsByIdBatchedWithHttpInfo(idList: IdList?) : ApiResponse<MediaObjectQueryResult?> {
        val localVariableConfig = findObjectsByIdBatchedRequestConfig(idList = idList)

        return request<IdList, MediaObjectQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findObjectsByIdBatched
     *
     * @param idList  (optional)
     * @return RequestConfig
     */
    fun findObjectsByIdBatchedRequestConfig(idList: IdList?) : RequestConfig<IdList> {
        val localVariableBody = idList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/object/by/id",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get a fixed amount of objects from the sorted list
     * Equivalent to calling SELECT * FROM multimediaobject ORDER BY objectid ASC LIMIT limit SKIP skip. Mostly used for pagination when wanting to retrieve all objects
     * @param skip How many objects should be skipped
     * @param limit How many object at most should be fetched
     * @return MediaObjectQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findObjectsPagination(skip: kotlin.Int, limit: kotlin.Int) : MediaObjectQueryResult {
        val localVarResponse = findObjectsPaginationWithHttpInfo(skip = skip, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a fixed amount of objects from the sorted list
     * Equivalent to calling SELECT * FROM multimediaobject ORDER BY objectid ASC LIMIT limit SKIP skip. Mostly used for pagination when wanting to retrieve all objects
     * @param skip How many objects should be skipped
     * @param limit How many object at most should be fetched
     * @return ApiResponse<MediaObjectQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findObjectsPaginationWithHttpInfo(skip: kotlin.Int, limit: kotlin.Int) : ApiResponse<MediaObjectQueryResult?> {
        val localVariableConfig = findObjectsPaginationRequestConfig(skip = skip, limit = limit)

        return request<Unit, MediaObjectQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findObjectsPagination
     *
     * @param skip How many objects should be skipped
     * @param limit How many object at most should be fetched
     * @return RequestConfig
     */
    fun findObjectsPaginationRequestConfig(skip: kotlin.Int, limit: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/object/all/{skip}/{limit}".replace("{"+"skip"+"}", skip.toString()).replace("{"+"limit"+"}", limit.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
