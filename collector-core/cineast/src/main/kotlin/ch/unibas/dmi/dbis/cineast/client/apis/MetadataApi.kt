/**
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ch.unibas.dmi.dbis.cineast.client.apis

import java.io.IOException
import okhttp3.OkHttpClient

import ch.unibas.dmi.dbis.cineast.client.models.FeaturesAllCategoriesQueryResult
import ch.unibas.dmi.dbis.cineast.client.models.FeaturesByCategoryQueryResult
import ch.unibas.dmi.dbis.cineast.client.models.FeaturesByEntityQueryResult
import ch.unibas.dmi.dbis.cineast.client.models.FeaturesTextCategoryQueryResult
import ch.unibas.dmi.dbis.cineast.client.models.IdList
import ch.unibas.dmi.dbis.cineast.client.models.MediaObjectMetadataQueryResult
import ch.unibas.dmi.dbis.cineast.client.models.MediaSegmentMetadataQueryResult
import ch.unibas.dmi.dbis.cineast.client.models.OptionallyFilteredIdList
import ch.unibas.dmi.dbis.cineast.client.models.TagIDsForElementQueryResult

import com.fasterxml.jackson.annotation.JsonProperty

import ch.unibas.dmi.dbis.cineast.client.infrastructure.ApiClient
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ApiResponse
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ClientException
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ClientError
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ServerException
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ServerError
import ch.unibas.dmi.dbis.cineast.client.infrastructure.MultiValueMap
import ch.unibas.dmi.dbis.cineast.client.infrastructure.PartConfig
import ch.unibas.dmi.dbis.cineast.client.infrastructure.RequestConfig
import ch.unibas.dmi.dbis.cineast.client.infrastructure.RequestMethod
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ResponseType
import ch.unibas.dmi.dbis.cineast.client.infrastructure.Success
import ch.unibas.dmi.dbis.cineast.client.infrastructure.toMultiValue

class MetadataApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Find features for the given category for all (or specific) IDs
     * Find features for the given category for all (or specific) IDs
     * @param category 
     * @param idList  (optional)
     * @return FeaturesByCategoryQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findFeaturesByCategory(category: kotlin.String, idList: IdList? = null) : FeaturesByCategoryQueryResult {
        val localVarResponse = findFeaturesByCategoryWithHttpInfo(category = category, idList = idList)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FeaturesByCategoryQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find features for the given category for all (or specific) IDs
     * Find features for the given category for all (or specific) IDs
     * @param category 
     * @param idList  (optional)
     * @return ApiResponse<FeaturesByCategoryQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findFeaturesByCategoryWithHttpInfo(category: kotlin.String, idList: IdList?) : ApiResponse<FeaturesByCategoryQueryResult?> {
        val localVariableConfig = findFeaturesByCategoryRequestConfig(category = category, idList = idList)

        return request<IdList, FeaturesByCategoryQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findFeaturesByCategory
     *
     * @param category 
     * @param idList  (optional)
     * @return RequestConfig
     */
    fun findFeaturesByCategoryRequestConfig(category: kotlin.String, idList: IdList?) : RequestConfig<IdList> {
        val localVariableBody = idList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/feature/all/by/category/{category}".replace("{"+"category"+"}", category.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find features for the given entity name for all (or specific) IDs
     * Find features for the given entity name for all (or specific) IDs
     * @param entity 
     * @param idList  (optional)
     * @return FeaturesByEntityQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findFeaturesByEntity(entity: kotlin.String, idList: IdList? = null) : FeaturesByEntityQueryResult {
        val localVarResponse = findFeaturesByEntityWithHttpInfo(entity = entity, idList = idList)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FeaturesByEntityQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find features for the given entity name for all (or specific) IDs
     * Find features for the given entity name for all (or specific) IDs
     * @param entity 
     * @param idList  (optional)
     * @return ApiResponse<FeaturesByEntityQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findFeaturesByEntityWithHttpInfo(entity: kotlin.String, idList: IdList?) : ApiResponse<FeaturesByEntityQueryResult?> {
        val localVariableConfig = findFeaturesByEntityRequestConfig(entity = entity, idList = idList)

        return request<IdList, FeaturesByEntityQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findFeaturesByEntity
     *
     * @param entity 
     * @param idList  (optional)
     * @return RequestConfig
     */
    fun findFeaturesByEntityRequestConfig(entity: kotlin.String, idList: IdList?) : RequestConfig<IdList> {
        val localVariableBody = idList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/feature/all/by/entity/{entity}".replace("{"+"entity"+"}", entity.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find metadata for the given object id
     * Find metadata by the given object id
     * @param id The object id to find metadata of
     * @return MediaObjectMetadataQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetaById(id: kotlin.String) : MediaObjectMetadataQueryResult {
        val localVarResponse = findMetaByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find metadata for the given object id
     * Find metadata by the given object id
     * @param id The object id to find metadata of
     * @return ApiResponse<MediaObjectMetadataQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findMetaByIdWithHttpInfo(id: kotlin.String) : ApiResponse<MediaObjectMetadataQueryResult?> {
        val localVariableConfig = findMetaByIdRequestConfig(id = id)

        return request<Unit, MediaObjectMetadataQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findMetaById
     *
     * @param id The object id to find metadata of
     * @return RequestConfig
     */
    fun findMetaByIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/metadata/by/id/{id}".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find metadata for specific object id in given domain with given key
     * The description
     * @param id The object id
     * @param domain The domain name
     * @param key Metadata key
     * @return MediaObjectMetadataQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetaFullyQualified(id: kotlin.String, domain: kotlin.String, key: kotlin.String) : MediaObjectMetadataQueryResult {
        val localVarResponse = findMetaFullyQualifiedWithHttpInfo(id = id, domain = domain, key = key)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find metadata for specific object id in given domain with given key
     * The description
     * @param id The object id
     * @param domain The domain name
     * @param key Metadata key
     * @return ApiResponse<MediaObjectMetadataQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findMetaFullyQualifiedWithHttpInfo(id: kotlin.String, domain: kotlin.String, key: kotlin.String) : ApiResponse<MediaObjectMetadataQueryResult?> {
        val localVariableConfig = findMetaFullyQualifiedRequestConfig(id = id, domain = domain, key = key)

        return request<Unit, MediaObjectMetadataQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findMetaFullyQualified
     *
     * @param id The object id
     * @param domain The domain name
     * @param key Metadata key
     * @return RequestConfig
     */
    fun findMetaFullyQualifiedRequestConfig(id: kotlin.String, domain: kotlin.String, key: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/metadata/of/{id}/in/{domain}/with/{key}".replace("{"+"id"+"}", id.toString()).replace("{"+"domain"+"}", domain.toString()).replace("{"+"key"+"}", key.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find metadata for specific object id in given domain
     * Find metadata for specific object id in given domain
     * @param domain The domain of the metadata to find
     * @param id The object id of the multimedia object to find metadata for
     * @return MediaObjectMetadataQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetadataByDomain(domain: kotlin.String, id: kotlin.String) : MediaObjectMetadataQueryResult {
        val localVarResponse = findMetadataByDomainWithHttpInfo(domain = domain, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find metadata for specific object id in given domain
     * Find metadata for specific object id in given domain
     * @param domain The domain of the metadata to find
     * @param id The object id of the multimedia object to find metadata for
     * @return ApiResponse<MediaObjectMetadataQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findMetadataByDomainWithHttpInfo(domain: kotlin.String, id: kotlin.String) : ApiResponse<MediaObjectMetadataQueryResult?> {
        val localVariableConfig = findMetadataByDomainRequestConfig(domain = domain, id = id)

        return request<Unit, MediaObjectMetadataQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findMetadataByDomain
     *
     * @param domain The domain of the metadata to find
     * @param id The object id of the multimedia object to find metadata for
     * @return RequestConfig
     */
    fun findMetadataByDomainRequestConfig(domain: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/metadata/in/{domain}/by/id/{id}".replace("{"+"domain"+"}", domain.toString()).replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find metadata in the specified domain for all the given ids
     * Find metadata in the specified domain for all the given ids
     * @param domain The domain of the metadata to find
     * @param idList  (optional)
     * @return MediaObjectMetadataQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetadataByDomainBatched(domain: kotlin.String, idList: IdList? = null) : MediaObjectMetadataQueryResult {
        val localVarResponse = findMetadataByDomainBatchedWithHttpInfo(domain = domain, idList = idList)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find metadata in the specified domain for all the given ids
     * Find metadata in the specified domain for all the given ids
     * @param domain The domain of the metadata to find
     * @param idList  (optional)
     * @return ApiResponse<MediaObjectMetadataQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findMetadataByDomainBatchedWithHttpInfo(domain: kotlin.String, idList: IdList?) : ApiResponse<MediaObjectMetadataQueryResult?> {
        val localVariableConfig = findMetadataByDomainBatchedRequestConfig(domain = domain, idList = idList)

        return request<IdList, MediaObjectMetadataQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findMetadataByDomainBatched
     *
     * @param domain The domain of the metadata to find
     * @param idList  (optional)
     * @return RequestConfig
     */
    fun findMetadataByDomainBatchedRequestConfig(domain: kotlin.String, idList: IdList?) : RequestConfig<IdList> {
        val localVariableBody = idList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/metadata/in/{domain}".replace("{"+"domain"+"}", domain.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find metadata for a given object id with specified key
     * Find metadata for a given object id with specified key
     * @param key The key of the metadata to find
     * @param id The object id of for which the metadata should be find
     * @return MediaObjectMetadataQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetadataByKey(key: kotlin.String, id: kotlin.String) : MediaObjectMetadataQueryResult {
        val localVarResponse = findMetadataByKeyWithHttpInfo(key = key, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find metadata for a given object id with specified key
     * Find metadata for a given object id with specified key
     * @param key The key of the metadata to find
     * @param id The object id of for which the metadata should be find
     * @return ApiResponse<MediaObjectMetadataQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findMetadataByKeyWithHttpInfo(key: kotlin.String, id: kotlin.String) : ApiResponse<MediaObjectMetadataQueryResult?> {
        val localVariableConfig = findMetadataByKeyRequestConfig(key = key, id = id)

        return request<Unit, MediaObjectMetadataQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findMetadataByKey
     *
     * @param key The key of the metadata to find
     * @param id The object id of for which the metadata should be find
     * @return RequestConfig
     */
    fun findMetadataByKeyRequestConfig(key: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/metadata/with/{key}/by/id/{id}".replace("{"+"key"+"}", key.toString()).replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find metadata for a given object id with specified key
     * Find metadata with a the speicifed key from the path across all domains and for the provided ids
     * @param key The key of the metadata to find
     * @param idList  (optional)
     * @return MediaObjectMetadataQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetadataByKeyBatched(key: kotlin.String, idList: IdList? = null) : MediaObjectMetadataQueryResult {
        val localVarResponse = findMetadataByKeyBatchedWithHttpInfo(key = key, idList = idList)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find metadata for a given object id with specified key
     * Find metadata with a the speicifed key from the path across all domains and for the provided ids
     * @param key The key of the metadata to find
     * @param idList  (optional)
     * @return ApiResponse<MediaObjectMetadataQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findMetadataByKeyBatchedWithHttpInfo(key: kotlin.String, idList: IdList?) : ApiResponse<MediaObjectMetadataQueryResult?> {
        val localVariableConfig = findMetadataByKeyBatchedRequestConfig(key = key, idList = idList)

        return request<IdList, MediaObjectMetadataQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findMetadataByKeyBatched
     *
     * @param key The key of the metadata to find
     * @param idList  (optional)
     * @return RequestConfig
     */
    fun findMetadataByKeyBatchedRequestConfig(key: kotlin.String, idList: IdList?) : RequestConfig<IdList> {
        val localVariableBody = idList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/metadata/with/{key}".replace("{"+"key"+"}", key.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Finds metadata for the given list of object ids
     * Finds metadata for the given list of object ids
     * @param optionallyFilteredIdList  (optional)
     * @return MediaObjectMetadataQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetadataForObjectIdBatched(optionallyFilteredIdList: OptionallyFilteredIdList? = null) : MediaObjectMetadataQueryResult {
        val localVarResponse = findMetadataForObjectIdBatchedWithHttpInfo(optionallyFilteredIdList = optionallyFilteredIdList)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Finds metadata for the given list of object ids
     * Finds metadata for the given list of object ids
     * @param optionallyFilteredIdList  (optional)
     * @return ApiResponse<MediaObjectMetadataQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findMetadataForObjectIdBatchedWithHttpInfo(optionallyFilteredIdList: OptionallyFilteredIdList?) : ApiResponse<MediaObjectMetadataQueryResult?> {
        val localVariableConfig = findMetadataForObjectIdBatchedRequestConfig(optionallyFilteredIdList = optionallyFilteredIdList)

        return request<OptionallyFilteredIdList, MediaObjectMetadataQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findMetadataForObjectIdBatched
     *
     * @param optionallyFilteredIdList  (optional)
     * @return RequestConfig
     */
    fun findMetadataForObjectIdBatchedRequestConfig(optionallyFilteredIdList: OptionallyFilteredIdList?) : RequestConfig<OptionallyFilteredIdList> {
        val localVariableBody = optionallyFilteredIdList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/metadata/by/id",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find features for the given id
     * Find features by the given id
     * @param id The id to find features of
     * @return FeaturesAllCategoriesQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSegFeatById(id: kotlin.String) : FeaturesAllCategoriesQueryResult {
        val localVarResponse = findSegFeatByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FeaturesAllCategoriesQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find features for the given id
     * Find features by the given id
     * @param id The id to find features of
     * @return ApiResponse<FeaturesAllCategoriesQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSegFeatByIdWithHttpInfo(id: kotlin.String) : ApiResponse<FeaturesAllCategoriesQueryResult?> {
        val localVariableConfig = findSegFeatByIdRequestConfig(id = id)

        return request<Unit, FeaturesAllCategoriesQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findSegFeatById
     *
     * @param id The id to find features of
     * @return RequestConfig
     */
    fun findSegFeatByIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/feature/all/by/id/{id}".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find metadata for the given segment id
     * Find metadata by the given segment id
     * @param id The segment id to find metadata of
     * @return MediaSegmentMetadataQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSegMetaById(id: kotlin.String) : MediaSegmentMetadataQueryResult {
        val localVarResponse = findSegMetaByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaSegmentMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find metadata for the given segment id
     * Find metadata by the given segment id
     * @param id The segment id to find metadata of
     * @return ApiResponse<MediaSegmentMetadataQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSegMetaByIdWithHttpInfo(id: kotlin.String) : ApiResponse<MediaSegmentMetadataQueryResult?> {
        val localVariableConfig = findSegMetaByIdRequestConfig(id = id)

        return request<Unit, MediaSegmentMetadataQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findSegMetaById
     *
     * @param id The segment id to find metadata of
     * @return RequestConfig
     */
    fun findSegMetaByIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/metadata/by/segmentid/{id}".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find tag ids for the given id
     * Find tag ids for the given id
     * @param id The id to find tagids of
     * @return TagIDsForElementQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findTagInformationById(id: kotlin.String) : TagIDsForElementQueryResult {
        val localVarResponse = findTagInformationByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TagIDsForElementQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find tag ids for the given id
     * Find tag ids for the given id
     * @param id The id to find tagids of
     * @return ApiResponse<TagIDsForElementQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findTagInformationByIdWithHttpInfo(id: kotlin.String) : ApiResponse<TagIDsForElementQueryResult?> {
        val localVariableConfig = findTagInformationByIdRequestConfig(id = id)

        return request<Unit, TagIDsForElementQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findTagInformationById
     *
     * @param id The id to find tagids of
     * @return RequestConfig
     */
    fun findTagInformationByIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/feature/tags/by/id/{id}".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find Text for the given id and retrieval category
     * Find Text by the given id and retrieval category
     * @param id The id to find text of
     * @param category The category for which retrieval shall be performed
     * @return FeaturesTextCategoryQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findTextByIDAndCat(id: kotlin.String, category: kotlin.String) : FeaturesTextCategoryQueryResult {
        val localVarResponse = findTextByIDAndCatWithHttpInfo(id = id, category = category)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FeaturesTextCategoryQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find Text for the given id and retrieval category
     * Find Text by the given id and retrieval category
     * @param id The id to find text of
     * @param category The category for which retrieval shall be performed
     * @return ApiResponse<FeaturesTextCategoryQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findTextByIDAndCatWithHttpInfo(id: kotlin.String, category: kotlin.String) : ApiResponse<FeaturesTextCategoryQueryResult?> {
        val localVariableConfig = findTextByIDAndCatRequestConfig(id = id, category = category)

        return request<Unit, FeaturesTextCategoryQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findTextByIDAndCat
     *
     * @param id The id to find text of
     * @param category The category for which retrieval shall be performed
     * @return RequestConfig
     */
    fun findTextByIDAndCatRequestConfig(id: kotlin.String, category: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/feature/text/by/{id}/{category}".replace("{"+"id"+"}", id.toString()).replace("{"+"category"+"}", category.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
