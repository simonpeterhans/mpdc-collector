/**
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ch.unibas.dmi.dbis.cineast.client.apis

import java.io.IOException
import okhttp3.OkHttpClient

import ch.unibas.dmi.dbis.cineast.client.models.IdList
import ch.unibas.dmi.dbis.cineast.client.models.MediaSegmentQueryResult

import com.fasterxml.jackson.annotation.JsonProperty

import ch.unibas.dmi.dbis.cineast.client.infrastructure.ApiClient
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ApiResponse
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ClientException
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ClientError
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ServerException
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ServerError
import ch.unibas.dmi.dbis.cineast.client.infrastructure.MultiValueMap
import ch.unibas.dmi.dbis.cineast.client.infrastructure.PartConfig
import ch.unibas.dmi.dbis.cineast.client.infrastructure.RequestConfig
import ch.unibas.dmi.dbis.cineast.client.infrastructure.RequestMethod
import ch.unibas.dmi.dbis.cineast.client.infrastructure.ResponseType
import ch.unibas.dmi.dbis.cineast.client.infrastructure.Success
import ch.unibas.dmi.dbis.cineast.client.infrastructure.toMultiValue

class SegmentApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Finds segments for specified id
     * Finds segments for specified id
     * @param id The id of the segments
     * @return MediaSegmentQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSegmentById(id: kotlin.String) : MediaSegmentQueryResult {
        val localVarResponse = findSegmentByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaSegmentQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Finds segments for specified id
     * Finds segments for specified id
     * @param id The id of the segments
     * @return ApiResponse<MediaSegmentQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSegmentByIdWithHttpInfo(id: kotlin.String) : ApiResponse<MediaSegmentQueryResult?> {
        val localVariableConfig = findSegmentByIdRequestConfig(id = id)

        return request<Unit, MediaSegmentQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findSegmentById
     *
     * @param id The id of the segments
     * @return RequestConfig
     */
    fun findSegmentByIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/segments/by/id/{id}".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Finds segments for specified ids
     * Finds segments for specified ids
     * @param idList  (optional)
     * @return MediaSegmentQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSegmentByIdBatched(idList: IdList? = null) : MediaSegmentQueryResult {
        val localVarResponse = findSegmentByIdBatchedWithHttpInfo(idList = idList)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaSegmentQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Finds segments for specified ids
     * Finds segments for specified ids
     * @param idList  (optional)
     * @return ApiResponse<MediaSegmentQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSegmentByIdBatchedWithHttpInfo(idList: IdList?) : ApiResponse<MediaSegmentQueryResult?> {
        val localVariableConfig = findSegmentByIdBatchedRequestConfig(idList = idList)

        return request<IdList, MediaSegmentQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findSegmentByIdBatched
     *
     * @param idList  (optional)
     * @return RequestConfig
     */
    fun findSegmentByIdBatchedRequestConfig(idList: IdList?) : RequestConfig<IdList> {
        val localVariableBody = idList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/segments/by/id",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Find segments by their media object&#39;s id
     * Find segments by their media object&#39;s id
     * @param id The id of the media object to find segments fo
     * @return MediaSegmentQueryResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSegmentByObjectId(id: kotlin.String) : MediaSegmentQueryResult {
        val localVarResponse = findSegmentByObjectIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaSegmentQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find segments by their media object&#39;s id
     * Find segments by their media object&#39;s id
     * @param id The id of the media object to find segments fo
     * @return ApiResponse<MediaSegmentQueryResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSegmentByObjectIdWithHttpInfo(id: kotlin.String) : ApiResponse<MediaSegmentQueryResult?> {
        val localVariableConfig = findSegmentByObjectIdRequestConfig(id = id)

        return request<Unit, MediaSegmentQueryResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findSegmentByObjectId
     *
     * @param id The id of the media object to find segments fo
     * @return RequestConfig
     */
    fun findSegmentByObjectIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/segments/all/object/{id}".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
